{"version":3,"file":"main.004aca7b11291d0239c4.bundle.js","sources":["webpack:////home/circleci/project/grid/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { get, has, fromPairs } from 'lodash';\nimport invariant from 'invariant';\n\nconst femto = 0;\nconst pico = 360;\nconst nano = 400;\nconst micro = 480;\nconst milli = 600;\nconst one = 720;\nconst kilo = 840;\nconst mega = 960;\nconst giga = 1024;\nconst tera = 1280;\nconst peta = 1360;\n\nconst minMq = (px) => `@media (min-width: ${px}px)`;\n\n/*\n  (p/l)(s/m/l)(device)Mq =\n    (portrait/landscape)(small/medium/large)(handset/tablet/computer)(media query)\n*/\nexport const femtoMq = minMq(femto);\nexport const picoMq = minMq(pico);\nexport const nanoMq = minMq(nano);\nexport const microMq = minMq(micro);\nexport const milliMq = minMq(milli);\nexport const oneMq = minMq(one);\nexport const kiloMq = minMq(kilo);\nexport const megaMq = minMq(mega);\nexport const gigaMq = minMq(giga);\nexport const teraMq = minMq(tera);\nexport const petaMq = minMq(peta);\n\nconst closedMq = (min, max) =>\n  `@media (min-width: ${min}px) and (max-width: ${max - 1}px)`;\n\n/*\n  (p/l)(s/m/l)(device)ClosedMq =\n    (portrait/landscape)(small/medium/large)(handset/tablet/computer)(closed)(media query)\n*/\nexport const femtoClosedMq = closedMq(femto, pico);\nexport const picoClosedMq = closedMq(pico, nano);\nexport const nanoClosedMq = closedMq(nano, micro);\nexport const microClosedMq = closedMq(micro, milli);\nexport const milliClosedMq = closedMq(milli, one);\nexport const oneClosedMq = closedMq(one, kilo);\nexport const kiloClosedMq = closedMq(kilo, mega);\nexport const megaClosedMq = closedMq(mega, giga);\nexport const gigaClosedMq = closedMq(giga, tera);\nexport const teraClosedMq = closedMq(tera, peta);\nexport const petaClosedMq = petaMq;\n\nconst getChildWidth = ({ columns, margin }) => {\n  const baseWidth = `calc(${100 / columns}% + ${margin / columns}em`;\n  const width = `${baseWidth} - ${(margin * (columns - 1))\n    / columns}em - ${(margin * 2) / columns}em)`;\n  return width;\n};\n\nconst getChildCss = ({ width, margin }) => `\n  min-width: ${width};\n  max-width: ${width};\n  margin-bottom: ${margin}em;\n  margin-left: ${margin}em;\n`;\n\nconst setChildWidth = (index, css) => `\n    & > *:nth-child(${index + 1}) {\n      ${css};\n    }\n  `;\n\nconst getGridCss = ({\n  margin, columns, children, dynamic,\n}) => {\n  const allChildren = [children].flat(Infinity);\n\n  const count = allChildren.length;\n\n  const spans = allChildren.map(({ props }) => {\n    const propSpan = get(props, 'span');\n    if (propSpan) {\n      const number = Number(propSpan);\n      invariant(\n        typeof number === 'number' && !Number.isNaN(number),\n        'number props must be valid number!',\n      );\n      return number;\n    }\n    return null;\n  });\n\n  /* start lastRowCalulations: make the last row span correctly */\n  const countWithSpans = count + spans.reduce((total, span) => (span ? span - 1 : 0), 0);\n  let nthChildRowException = null;\n  let remainder = countWithSpans % columns;\n  if (countWithSpans < columns) {\n    nthChildRowException = 0;\n  } else if (countWithSpans > columns && remainder !== 0) {\n    nthChildRowException = countWithSpans - remainder + 1;\n  }\n  if (remainder % 2 === 1 && countWithSpans !== 1) {\n    remainder += 1;\n  }\n  /* end lastRowCalulations */\n\n  let css = `\n    padding-top: ${margin}em;\n    padding-right: ${margin}em;\n  `;\n\n  const childCss = getChildCss({\n    width: getChildWidth({ columns, margin }),\n    margin,\n  });\n\n  css += `\n    & > * {\n      ${childCss};\n    }\n  `;\n\n  /* overrides for & > * styling */\n  css += spans\n    .map((span, index) => {\n      let calculatedColumns = columns;\n      let width = null;\n\n      if (\n        dynamic\n        && nthChildRowException !== null\n        && index >= nthChildRowException\n      ) {\n        calculatedColumns = remainder;\n        width = getChildWidth({ columns: calculatedColumns, margin });\n      }\n\n      if (span !== null) {\n        calculatedColumns = 12 / span;\n        width = getChildWidth({ columns: calculatedColumns, margin });\n      }\n\n      if (width !== null) {\n        return setChildWidth(index, getChildCss({ width, margin }));\n      }\n\n      return '';\n    })\n    .join('\\n');\n\n  return css;\n};\n\nconst defaultGridSizes = {\n  A: {\n    margin: 1,\n    columns: 4,\n  },\n  B: {\n    margin: 1,\n    columns: 8,\n  },\n  C: {\n    margin: 1.5,\n    columns: 8,\n  },\n  D: {\n    margin: 1.5,\n    columns: 12,\n  },\n  E: {\n    margin: 2,\n    columns: 12,\n  },\n  F: {\n    margin: 2.5,\n    columns: 12,\n  },\n};\n\nconst gridSizes = [\n  'femto', // 0\n  'pico', // 360\n  'nano', // 400\n  'micro', // 480\n  'milli', // 600\n  'one', // 720\n  'kilo', // 840\n  'mega', // 960\n  'giga', // 1024\n  'tera', // 1280\n  'peta', // 1360\n];\n\nconst defaultGridConfigMap = {\n  A: ['femto', 'pico', 'nano', 'micro'],\n  B: ['milli'],\n  C: ['one', 'kilo'],\n  D: ['mega'],\n  E: ['giga', 'tera'],\n  F: ['peta'],\n};\n\nexport const defaultGridConfig = fromPairs(\n  Object.entries(defaultGridConfigMap)\n    .map(([key, bps]) => bps.map((bp) => [bp, defaultGridSizes[key]]))\n    .flat(),\n);\n\nconst getGridForSize = (defaultSize, size) => (props) => {\n  const customSize = has(props, size);\n  return getGridCss({\n    ...defaultGridSizes[defaultSize],\n    ...(customSize ? props[size] : {}),\n    /* children, dynamic, count */\n    ...props,\n  });\n};\nexport const Grid = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  /* femto: 0-359 */\n  ${closedMq(femto, pico)} {\n    ${getGridForSize('A', 'femto')};\n  }\n  /* pico: 360-39 */\n  ${closedMq(pico, nano)} {\n    ${getGridForSize('A', 'pico')};\n  }\n  /* nano: 400-479 */\n  ${closedMq(nano, micro)} {\n    ${getGridForSize('A', 'nano')};\n  }\n  /* micro: 480-599 */\n  ${closedMq(micro, milli)} {\n    ${getGridForSize('A', 'micro')};\n  }\n  /* milli: 600-719 */\n  ${closedMq(milli, one)} {\n    ${getGridForSize('B', 'milli')};\n  }\n  /* one: 720-839 */\n  ${closedMq(one, kilo)} {\n    ${getGridForSize('C', 'one')};\n  }\n  /* kilo: 840-959 */\n  ${closedMq(kilo, mega)} {\n    ${getGridForSize('C', 'kilo')};\n  }\n  /* mega: 960-1023 */\n  ${closedMq(mega, giga)} {\n    ${getGridForSize('D', 'mega')};\n  }\n  /* giga: 1024-1279 */\n  ${closedMq(giga, tera)} {\n    ${getGridForSize('E', 'giga')};\n  }\n  /* tera: 1280-1359 */\n  ${closedMq(tera, peta)} {\n    ${getGridForSize('E', 'tera')};\n  }\n  /* peta: 1360-Infinity */\n  ${petaMq} {\n    ${getGridForSize('F', 'peta')};\n  }\n`;\n"],"mappings":"AAMA","sourceRoot":""}